clear all;
close all;
clc;

% Define the path to your mango leaf disease dataset
dataDir = 'D:\DIP\IMAGE DATA\TRAINNING DATA'; % Change this path to your mango leaf disease dataset directory

% Create an imageDatastore for your dataset and specify the desired output size
imds = imageDatastore(dataDir, ...
    'IncludeSubfolders', true, 'LabelSource', 'foldernames', 'ReadFcn', @(filename) imresize(imread(filename), [64, 64]));

% Define the CNN architecture
layers = [
    imageInputLayer([64 64 3])    % width,height,channle num
    
    convolution2dLayer(3, 16, 'Padding', 'same')    % filter size,filter numbers(output features)
    batchNormalizationLayer                         % Normalizing the output
    reluLayer                                       % eliminating the negative values(rectified linear unit)
    
    maxPooling2dLayer(2, 'Stride', 2)               % reducing the output features of the above layers(divide features by filter size)
    
    convolution2dLayer(3, 32, 'Padding', 'same')      
    batchNormalizationLayer
    reluLayer
    
    maxPooling2dLayer(2, 'Stride', 2)
    
    fullyConnectedLayer(4, 'Name', 'fc_final')
    softmaxLayer                                    % Activation function that gives propabilities values as output
    classificationLayer
];

% Split the dataset into training and validation sets
[imdsTrain, imdsValidation] = splitEachLabel(imds, 0.7, 'random');

% Define training options // sgdm is a optimizer which helps is learning
options = trainingOptions('sgdm', ...
    'MaxEpochs', 10, ...
    'MiniBatchSize', 32, ...
    'InitialLearnRate', 0.001, ...
    'Shuffle', 'every-epoch', ...
    'ValidationData', imdsValidation, ...
    'ValidationFrequency', 50, ...
    'Verbose', true, ...
    'Plots', 'training-progress');

% Train the CNN
 %net = trainNetwork(imdsTrain, layers, options);
%save net;


load net;


% Use uigetfile to interactively select the new mango leaf image
[filename, pathname] = uigetfile({'*.jpg', 'JPEG Files (*.jpg)'}, 'Select a JPEG file');



if isequal(filename, 0)
    disp('User canceled the operation');
else
    % Combine the selected path and filename
    fullFilePath = fullfile(pathname, filename);

    % Load the selected image and classify it
    newImage = imread(fullFilePath);

    % Preprocess and resize the new image to match the input size of the trained model
    processedImage = imresize(newImage, [64, 64]);

    % Use the trained model to classify the new image
    predictedClass = classify(net, processedImage);
    % Apply smoothing with a desired degree of smoothness
    degreeOfSmoothness = 2; % Adjust this value as needed
    smoothedImage = imgaussfilt(newImage, degreeOfSmoothness); % You can use other smoothing methods if desired

    % Convert the smoothed image to grayscale
    grayImage = rgb2gray(smoothedImage);

    % Thresholding to create a binary image
    thresholdValue = graythresh(grayImage);
    binaryImage = imbinarize(grayImage, thresholdValue);

    % Subtract the binary image from the original to find the spots on the leaf
    spotsImage = newImage - uint8(binaryImage) * 255;

    % Display the results

    subplot(1, 3, 2);
    imshow(binaryImage);
    title('Binary Image');

    subplot(1, 3, 3);
    imshow(spotsImage);
    title('Spots on the Leaf');

    % Additional information: Display the threshold value
    fprintf('Threshold value: %.2f\n', thresholdValue);

    % Display the processed input image
    figure;
    subplot(1, 3, 1);
    imshow(newImage);
    title('Original Image');

    subplot(1, 3, 2);
    imshow(processedImage);
    title('Processed Image');

    subplot(1, 3, 3);
    imshow(smoothedImage);
    title('Smoothed Image');
    

    % Display the predicted class
    disp(['Predicted Class: ', char(predictedClass)]);
    
    % Display information based on the predicted class
    if strcmp(predictedClass, 'Disease')
        disp('The image indicates a disease. Further information and recommendations can be provided.');
        % Additional information or actions related to the disease class can be added here.
    elseif strcmp(predictedClass, 'NoDisease')
        disp('The image does not show signs of disease.');
        % Additional information or actions related to the no disease class can be added here.
    %else
        %disp('Unknown class.');
    end
end

